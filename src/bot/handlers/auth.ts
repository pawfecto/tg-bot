import { Telegraf } from 'telegraf';
import { normalizePhone } from '../../lib/phone';
import { supabase } from '../../lib/supabase';
import { ENV } from '../../config/env';

export function registerAuthHandlers(bot: Telegraf) {
  bot.start(async (ctx) => {
    await ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', {
      reply_markup: { keyboard: [[{ text: 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', request_contact: true }]], resize_keyboard: true, one_time_keyboard: true }
    });
  });

  bot.on('contact', async (ctx) => {
    const c: any = (ctx as any).message?.contact;
    const raw = c?.phone_number as string | undefined;
    const phone = normalizePhone(raw);
    await ctx.reply('üîé –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–º–µ—Ä‚Ä¶', { reply_markup: { remove_keyboard: true } });
    if (!phone) return void ctx.reply('‚ùå –ù–æ–º–µ—Ä –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º.');

    // –Ω–∞–π—Ç–∏/—Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    const { data: existing } = await supabase.from('clients').select('*').eq('phone_number', phone).maybeSingle();
    if (!existing && ENV.STRICT_MODE) return void ctx.reply('‚ùå –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
    let client = existing;
    if (!client) {
      const fullName = [ctx.from?.first_name, ctx.from?.last_name].filter(Boolean).join(' ') || null;
      const { data: created, error } = await supabase.from('clients').insert({ phone_number: phone, full_name: fullName }).select('*').single();
      if (error) throw error;
      client = created;
    }
    const u = ctx.from!;
    const { error: upErr } = await supabase.from('tg_users').upsert({
      telegram_id: u.id, client_id: client.id, username: u.username ?? null, first_name: u.first_name ?? null, last_name: u.last_name ?? null,
      phone_number: phone, is_verified: true, last_seen: new Date().toISOString()
    }, { onConflict: 'telegram_id' });
    if (upErr) throw upErr;

    await ctx.reply(`‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${client.full_name ?? '–∫–ª–∏–µ–Ω—Ç'}!\n–í–∞—à –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–¥: ${client.client_code}`);
  });
}
