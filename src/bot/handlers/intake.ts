import { Telegraf } from 'telegraf';
import { requireManager } from '../../lib/roles';
import { startIntake, addItem, finalizeIntake, getActiveIntake, clearActiveIntake } from '../../lib/intake';
import { addPhoto } from '../../lib/shipments';

export function registerIntakeHandlers(bot: Telegraf) {
  bot.command('receive_start', requireManager, async (ctx) => {
    const args = (ctx.message as any).text.split(/\s+/).slice(1);
    const code = args.shift(); const ref = args.join(' ') || undefined;
    if (!code) return void ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /receive_start C001 [–Ω–æ–º–µ—Ä/–ø—Ä–∏–º.]');
    const { client, shipmentId } = await startIntake(ctx.from!.id, code, ref);
    await ctx.reply(`üü¢ –ü—Ä–∏—ë–º–∫–∞ –Ω–∞—á–∞—Ç–∞ –¥–ª—è ${client.client_code}. –®–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏ —Å—Ç—Ä–æ–∫–∏ "–ø–∞–ª–ª–µ—Ç—ã –∫–æ—Ä–æ–±–∫–∏ –≤–µ—Å".`);
  });

  bot.hears(/^(\d+)\s+(\d+)\s+(\d+(?:[.,]\d+)?)/, requireManager, async (ctx, next) => {
    if (!getActiveIntake(ctx.from!.id)) return next();
    const m = (ctx.message as any).text.trim().match(/^(\d+)\s+(\d+)\s+(\d+(?:[.,]\d+)?)/)!;
    const pallets = parseInt(m[1],10); const boxes = parseInt(m[2],10); const gross = parseFloat(m[3].replace(',', '.'));
    const sid = await addItem(ctx.from!.id, pallets, boxes, gross);
    await ctx.reply(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø—Ä–∏—ë–º–∫—É: –ø–∞–ª–ª–µ—Ç ${pallets}, –º–µ—Å—Ç ${boxes}, –±—Ä—É—Ç—Ç–æ ${gross.toFixed(2)} –∫–≥ (ID: ${sid.slice(0,8)}‚Ä¶)`);
  });

  // —Ñ–æ—Ç–æ –≤ –∞–∫—Ç–∏–≤–Ω—É—é –ø—Ä–∏—ë–º–∫—É (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)
  bot.on('photo', requireManager, async (ctx, next) => {
    const sid = getActiveIntake(ctx.from!.id);
    if (!sid) return next();
    const best = (ctx.message as any).photo.at(-1);
    await addPhoto(sid, { file_id: best.file_id, file_unique_id: best.file_unique_id, width: best.width, height: best.height, file_size: best.file_size });
    await ctx.reply('üñºÔ∏è –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ç–µ–∫—É—â—É—é –ø—Ä–∏—ë–º–∫—É.');
  });

  bot.command('receive_done', requireManager, async (ctx) => {
    const sid = getActiveIntake(ctx.from!.id);
    if (!sid) return void ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–∏—ë–º–∫–∏. /receive_start C001');
    const tot = await finalizeIntake(sid);
    clearActiveIntake(ctx.from!.id);
    await ctx.reply(`‚úÖ –ü—Ä–∏—ë–º–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–∞–ª–ª–µ—Ç ${tot.pallets}, –º–µ—Å—Ç ${tot.boxes}, –±—Ä—É—Ç—Ç–æ ${tot.gross.toFixed(2)} –∫–≥. –ö–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω.`);
    // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—ã–Ω–µ—Å–µ–Ω–æ –≤ quickShipment –∞–ª—å–±–æ–º-–¥–µ–±–∞—É–Ω—Å –∏–ª–∏ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  });
}
