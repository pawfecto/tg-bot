// src/bot/handlers/profile.ts
import { Telegraf, Markup } from 'telegraf';
import { supabase } from '../../lib/supabase';

// ===== helpers ===================================================

type TgUserRow = {
  telegram_id: number;
  client_id: string | null;
  is_verified: boolean;
};
type ClientRow = {
  id: string;
  client_code: string | null;
  full_name: string | null;
  phone_number: string | null;
  country: 'ru' | 'kz' | 'uz' | 'kg' | null;
  delivery_type: 'warehouse' | 'home' | null;
  delivery_address: string | null;
  email: string | null;
  language: 'ru' | 'en' | null;
};
type PrefsRow = {
  client_id: string;
  notif_arrival: boolean;
  notif_update_text: boolean;
  notif_update_photo: boolean;
  notif_storage: boolean;
  notif_daily_digest: boolean;
};

const COUNTRY_LABEL: Record<string, string> = {
  ru: 'üá∑üá∫ –†–æ—Å—Å–∏—è',
  kz: 'üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
  uz: 'üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω',
  kg: 'üá∞üá¨ –ö–∏—Ä–≥–∏–∑—Å—Ç–∞–Ω',
};
const DELIVERY_LABEL: Record<string, string> = {
  warehouse: 'üè¨ –î–æ —Å–∫–ª–∞–¥–∞',
  home: 'üè† –î–æ –¥–æ–º–∞',
};

const PREF_KEYS: Array<keyof PrefsRow> = [
  'notif_arrival',
  'notif_update_text',
  'notif_update_photo',
  'notif_storage',
  'notif_daily_digest',
];

function flag(on: boolean) {
  return on ? '‚úÖ' : '‚ùå';
}

async function getMyTgUser(telegramId: number): Promise<TgUserRow | null> {
  const { data } = await supabase
    .from('tg_users')
    .select('telegram_id, client_id, is_verified')
    .eq('telegram_id', telegramId)
    .maybeSingle();
  return (data as any) ?? null;
}

async function getClient(clientId: string): Promise<ClientRow | null> {
  const { data } = await supabase
    .from('clients')
    .select('id, client_code, full_name, phone_number, country, delivery_type, delivery_address, email, language')
    .eq('id', clientId)
    .maybeSingle();
  return (data as any) ?? null;
}

async function ensurePrefs(clientId: string): Promise<PrefsRow> {
  const { data } = await supabase
    .from('client_prefs')
    .select('*')
    .eq('client_id', clientId)
    .maybeSingle();

  if (data) return data as any;

  const defaults = {
    client_id: clientId,
    notif_arrival: true,
    notif_update_text: true,
    notif_update_photo: true,
    notif_storage: false,
    notif_daily_digest: false,
  };
  const { data: ins, error } = await supabase
    .from('client_prefs')
    .insert(defaults)
    .select('*')
    .single();
  if (error) throw error;
  return ins as any;
}

async function countTodayShipments(clientId: string): Promise<number> {
  // —É–ø—Ä–æ—â–µ–Ω–Ω–æ: –æ—Ç –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –ø–æ UTC
  const { data } = await supabase
    .from('shipments')
    .select('id', { count: 'exact', head: true })
    .eq('client_id', clientId)
    .gte('created_at', new Date(new Date().toISOString().slice(0, 10) + 'T00:00:00.000Z').toISOString());
  return (data as any)?.length ?? 0; // head:true –≤–µ—Ä–Ω–µ—Ç —Ç–æ–ª—å–∫–æ count –≤ header; supabase-js –Ω–µ –æ—Ç–¥–∞–µ—Ç —Ç—É—Ç, –ø–æ—ç—Ç–æ–º—É fallback 0
}

function profileKb() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', 'prof:edit')],
    [Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'prof:notif')],
    [
      Markup.button.callback('üì¶ –ú–æ–∏ –≥—Ä—É–∑—ã', 'prof:shipments:1'),
      Markup.button.callback('üßæ –û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å', 'prof:report:today')
    ],
    [Markup.button.callback('üß∑ –ü—Ä–æ–ø—É—Å–∫ (QR)', 'prof:qr')],
  ]);
}

function editKb() {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback('üë§ –ò–º—è', 'prof:edit:name'),
      Markup.button.callback('üìß Email', 'prof:edit:email'),
    ],
    [
      Markup.button.callback('üåç –°—Ç—Ä–∞–Ω–∞', 'prof:edit:country'),
      Markup.button.callback('üöö –î–æ—Å—Ç–∞–≤–∫–∞', 'prof:edit:delivery'),
    ],
    [Markup.button.callback('üè† –ê–¥—Ä–µ—Å (–¥–ª—è –¥–æ–º–∞)', 'prof:edit:address')],
    [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'prof:open')],
  ]);
}

function notifKb(p: PrefsRow) {
  return Markup.inlineKeyboard([
    [Markup.button.callback(`${flag(p.notif_arrival)} –ì—Ä—É–∑ –ø–æ—Å—Ç—É–ø–∏–ª`, 'prof:notif:toggle:notif_arrival')],
    [Markup.button.callback(`${flag(p.notif_update_text)} –ò–∑–º. (—Ç–µ–∫—Å—Ç)`, 'prof:notif:toggle:notif_update_text')],
    [Markup.button.callback(`${flag(p.notif_update_photo)} –ò–∑–º. (—Ñ–æ—Ç–æ)`, 'prof:notif:toggle:notif_update_photo')],
    [Markup.button.callback(`${flag(p.notif_storage)} –•—Ä–∞–Ω–µ–Ω–∏–µ/–ø—Ä–æ—Å—Ä–æ—á–∫–∞`, 'prof:notif:toggle:notif_storage')],
    [Markup.button.callback(`${flag(p.notif_daily_digest)} –°–≤–æ–¥–∫–∞ –¥–Ω—è 20:00`, 'prof:notif:toggle:notif_daily_digest')],
    [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'prof:open')],
  ]);
}

// ===== helpers for shipments inline menu =========================

function fmtDate(d: string) {
  return new Date(d).toISOString().slice(0, 10);
}
function fmtKg(n: number | null | undefined) {
  return (Number(n) || 0).toFixed(2);
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤–æ–∫: –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É + –ø–∞–≥–∏–Ω–∞—Ü–∏—è
function shipmentsListKb(
  rows: Array<{ id: string; boxes: number | null; gross_kg: number | null; created_at: string }>,
  page: number
) {
  const shipmentButtons = rows.map((r) => [
    Markup.button.callback(
      `${fmtDate(r.created_at)} ‚Ä¢ ${r.boxes ?? 0} –º–µ—Å—Ç ‚Ä¢ ${fmtKg(r.gross_kg)} –∫–≥`,
      `prof:shipment:${r.id}:${page}`
    ),
  ]);

  const nav = [
    [
      Markup.button.callback('‚óÄÔ∏è', `prof:shipments:${Math.max(1, page - 1)}`),
      Markup.button.callback('‚ñ∂Ô∏è', `prof:shipments:${page + 1}`),
    ],
    [Markup.button.callback('‚¨ÖÔ∏è –í –ø—Ä–æ—Ñ–∏–ª—å', 'prof:open')],
  ];

  return Markup.inlineKeyboard([...shipmentButtons, ...nav]);
}

async function renderProfileText(telegramId: number): Promise<string> {
  const me = await getMyTgUser(telegramId);
  if (!me || !me.client_id || !me.is_verified) {
    return '–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç.';
  }
  const c = await getClient(me.client_id);
  if (!c) return '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.';

  const country = c.country ? COUNTRY_LABEL[c.country] || c.country : '‚Äî';
  const delivery =
    c.delivery_type
      ? (DELIVERY_LABEL[c.delivery_type] + (c.delivery_type === 'home' && c.delivery_address ? `: ${c.delivery_address}` : ''))
      : '‚Äî';

  // –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  let todayCnt = 0;
  try { todayCnt = await countTodayShipments(c.id); } catch {}

  return [
    `üë§ *${c.full_name || '-'}*`,
    `–ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: *${c.client_code || '-'}*`,
    `–°—Ç—Ä–∞–Ω–∞: ${country}`,
    `–î–æ—Å—Ç–∞–≤–∫–∞: ${delivery}`,
    `–ö–æ–Ω—Ç–∞–∫—Ç—ã: ${c.phone_number || '-'}${c.email ? `, ${c.email}` : ''}`,
    `–ê–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–∑—ã —Å–µ–≥–æ–¥–Ω—è: *${todayCnt}*`,
  ].join('\n');
}

// ===== main handlers ============================================

export function registerProfileHandlers(bot: Telegraf) {
  // –ö–æ–º–∞–Ω–¥–∞
  bot.command('profile', async (ctx) => {
    const text = await renderProfileText(ctx.from!.id);
    await ctx.replyWithMarkdown(text, profileKb());
  });

  // –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥")
  bot.action('prof:open', async (ctx) => {
    await ctx.answerCbQuery();
    const text = await renderProfileText(ctx.from!.id);
    try {
      await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: profileKb().reply_markup });
    } catch {
      await ctx.replyWithMarkdown(text, profileKb());
    }
  });

  // –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  bot.action('prof:edit', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.editMessageText('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', { reply_markup: editKb().reply_markup });
  });

  // ---- –ø–æ–ª–µ: –∏–º—è
  bot.action('prof:edit:name', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ *–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é* –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π\nEDIT_NAME', { parse_mode: 'Markdown', reply_markup: { force_reply: true } });
  });
  bot.on('text', async (ctx, next) => {
    const r = (ctx.message as any)?.reply_to_message?.text as string | undefined;
    if (r !== '‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ *–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é* –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π\nEDIT_NAME') return next();

    const fullName = String((ctx.message as any).text).trim();
    const me = await getMyTgUser(ctx.from!.id);
    if (!me?.client_id) return void ctx.reply('‚õî –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

    const { error } = await supabase.from('clients').update({ full_name: fullName }).eq('id', me.client_id);
    if (error) return void ctx.reply('‚õî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.');

    await ctx.reply('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: –∏–º—è.');
  });

  // ---- –ø–æ–ª–µ: email
  bot.action('prof:edit:email', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ e-mail –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π\nEDIT_EMAIL', { reply_markup: { force_reply: true } });
  });
  bot.on('text', async (ctx, next) => {
    const r = (ctx.message as any)?.reply_to_message?.text as string | undefined;
    if (r !== '‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ e-mail –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π\nEDIT_EMAIL') return next();

    const email = String((ctx.message as any).text).trim();
    const me = await getMyTgUser(ctx.from!.id);
    if (!me?.client_id) return void ctx.reply('‚õî –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

    const { error } = await supabase.from('clients').update({ email }).eq('id', me.client_id);
    if (error) return void ctx.reply('‚õî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.');

    await ctx.reply('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: e-mail.');
  });

  // ---- –ø–æ–ª–µ: —Å—Ç—Ä–∞–Ω–∞
  bot.action('prof:edit:country', async (ctx) => {
    await ctx.answerCbQuery();
    const kb = Markup.inlineKeyboard([
      [
        Markup.button.callback('üá∑üá∫ –†–æ—Å—Å–∏—è', 'prof:country:ru'),
        Markup.button.callback('üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', 'prof:country:kz'),
      ],
      [
        Markup.button.callback('üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω', 'prof:country:uz'),
        Markup.button.callback('üá∞üá¨ –ö–∏—Ä–≥–∏–∑—Å—Ç–∞–Ω', 'prof:country:kg'),
      ],
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'prof:edit')],
    ]);
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:', { reply_markup: kb.reply_markup });
  });
  bot.action(/^prof:country:(ru|kz|uz|kg)$/, async (ctx) => {
    await ctx.answerCbQuery();
    const country = ctx.match![1] as ClientRow['country'];
    const me = await getMyTgUser(ctx.from!.id);
    if (!me?.client_id) return void ctx.reply('‚õî –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

    const { error } = await supabase.from('clients').update({ country }).eq('id', me.client_id);
    if (error) return void ctx.reply('‚õî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.');

    await ctx.reply(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: —Å—Ç—Ä–∞–Ω–∞ ‚Äî ${COUNTRY_LABEL[country] || country}.`);
  });

  // ---- –ø–æ–ª–µ: –¥–æ—Å—Ç–∞–≤–∫–∞
  bot.action('prof:edit:delivery', async (ctx) => {
    await ctx.answerCbQuery();
    const kb = Markup.inlineKeyboard([
      [
        Markup.button.callback('üè¨ –î–æ —Å–∫–ª–∞–¥–∞', 'prof:delivery:warehouse'),
        Markup.button.callback('üè† –î–æ –¥–æ–º–∞', 'prof:delivery:home'),
      ],
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'prof:edit')],
    ]);
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:', { reply_markup: kb.reply_markup });
  });
  bot.action(/^prof:delivery:(warehouse|home)$/, async (ctx) => {
    await ctx.answerCbQuery();
    const delivery = ctx.match![1] as ClientRow['delivery_type'];
    const me = await getMyTgUser(ctx.from!.id);
    if (!me?.client_id) return void ctx.reply('‚õî –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

    const { error } = await supabase.from('clients').update({ delivery_type: delivery }).eq('id', me.client_id);
    if (error) return void ctx.reply('‚õî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.');

    if (delivery === 'home') {
      await ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π\nEDIT_ADDRESS', { reply_markup: { force_reply: true } });
    } else {
      await ctx.reply('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ ‚Äî –¥–æ —Å–∫–ª–∞–¥–∞.');
    }
  });

  // ---- –ø–æ–ª–µ: –∞–¥—Ä–µ—Å (–¥–ª—è "–¥–æ –¥–æ–º–∞")
  bot.action('prof:edit:address', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π\nEDIT_ADDRESS', { reply_markup: { force_reply: true } });
  });
  bot.on('text', async (ctx, next) => {
    const r = (ctx.message as any)?.reply_to_message?.text as string | undefined;
    if (r !== '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π\nEDIT_ADDRESS') return next();

    const address = String((ctx.message as any).text).trim();
    const me = await getMyTgUser(ctx.from!.id);
    if (!me?.client_id) return void ctx.reply('‚õî –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    const { error } = await supabase.from('clients').update({ delivery_address: address, delivery_type: 'home' }).eq('id', me.client_id);
    if (error) return void ctx.reply('‚õî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.');
    await ctx.reply('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.');
  });

  // ---- —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  bot.action('prof:notif', async (ctx) => {
    await ctx.answerCbQuery();
    const me = await getMyTgUser(ctx.from!.id);
    if (!me?.client_id) return void ctx.reply('‚õî –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    const prefs = await ensurePrefs(me.client_id);
    await ctx.editMessageText('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', { reply_markup: notifKb(prefs).reply_markup });
  });
  bot.action(/^prof:notif:toggle:(.+)$/, async (ctx) => {
    await ctx.answerCbQuery();
    const key = ctx.match![1] as keyof PrefsRow;
    if (!PREF_KEYS.includes(key)) return;

    const me = await getMyTgUser(ctx.from!.id);
    if (!me?.client_id) return void ctx.reply('‚õî –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    const prefs = await ensurePrefs(me.client_id);

    const nextVal = !prefs[key] as any;
    const { error } = await supabase.from('client_prefs').update({ [key]: nextVal }).eq('client_id', me.client_id);
    if (error) return void ctx.reply('‚õî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.');

    const updated = { ...prefs, [key]: nextVal } as PrefsRow;
    await ctx.editMessageText('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', { reply_markup: notifKb(updated).reply_markup });
  });

  // ---- –º–æ–∏ –≥—Ä—É–∑—ã: –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é —Å–æ —Å–ø–∏—Å–∫–æ–º –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  bot.action(/^prof:shipments:(\d+)$/, async (ctx) => {
    await ctx.answerCbQuery();
    const page = Math.max(1, parseInt(ctx.match![1], 10) || 1);
    const limit = 5;
    const offset = (page - 1) * limit;

    const me = await getMyTgUser(ctx.from!.id);
    if (!me?.client_id) return void ctx.reply('‚õî –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

    const { data: rows } = await supabase
      .from('shipments')
      .select('id, pallets, boxes, gross_kg, created_at')
      .eq('client_id', me.client_id)
      .order('created_at', { ascending: false })
      .range(offset, offset + limit - 1);

    const title = `*–ú–æ–∏ –≥—Ä—É–∑—ã (—Å—Ç—Ä. ${page})*\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É:`;

    if (!rows || rows.length === 0) {
      const kb = Markup.inlineKeyboard([[Markup.button.callback('‚¨ÖÔ∏è –í –ø—Ä–æ—Ñ–∏–ª—å', 'prof:open')]]);
      try {
        await ctx.editMessageText('–ü–æ—Å—Ç–∞–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.', { reply_markup: kb.reply_markup });
      } catch {
        await ctx.reply('–ü–æ—Å—Ç–∞–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.', kb);
      }
      return;
    }

    const kb = shipmentsListKb(rows as any, page);
    try {
      await ctx.editMessageText(title, { parse_mode: 'Markdown', reply_markup: kb.reply_markup });
    } catch {
      await ctx.replyWithMarkdown(title, kb);
    }
  });

  // ---- –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ (–¥–µ—Ç–∞–ª–∏ + –∫–Ω–æ–ø–∫–∏ –§–æ—Ç–æ/–ù–∞–∑–∞–¥)
  bot.action(/^prof:shipment:([a-zA-Z0-9-]+):(\d+)$/, async (ctx) => {
    await ctx.answerCbQuery();
    const shipmentId = ctx.match![1];
    const fromPage = Math.max(1, parseInt(ctx.match![2], 10) || 1);

    const me = await getMyTgUser(ctx.from!.id);
    if (!me?.client_id) return void ctx.reply('‚õî –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

    const { data: row } = await supabase
      .from('shipments')
      .select('id, pallets, boxes, gross_kg, created_at')
      .eq('client_id', me.client_id)
      .eq('id', shipmentId)
      .maybeSingle();

    if (!row) {
      return void ctx.reply('–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    }

    const text =
      `*–ü–æ—Å—Ç–∞–≤–∫–∞*\n` +
      `ID: \`${row.id}\`\n` +
      `–î–∞—Ç–∞: ${fmtDate(row.created_at)}\n` +
      `–ú–µ—Å—Ç: ${row.boxes ?? 0}\n` +
      `–ü–∞–ª–ª–µ—Ç: ${row.pallets ?? '-'}\n` +
      `–ë—Ä—É—Ç—Ç–æ: ${fmtKg(row.gross_kg)} –∫–≥`;

    const kb = Markup.inlineKeyboard([
      [Markup.button.callback('üñº –§–æ—Ç–æ', `prof:shipment:photos:${row.id}:${fromPage}`)],
      [Markup.button.callback('‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É', `prof:shipments:${fromPage}`)],
    ]);

    try {
      await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: kb.reply_markup });
    } catch {
      await ctx.replyWithMarkdown(text, kb);
    }
  });

  // ---- —Ñ–æ—Ç–æ –ø–æ—Å—Ç–∞–≤–∫–∏ (–±–µ–∑ force_reply, —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)
  bot.action(/^prof:shipment:photos:([a-zA-Z0-9-]+):(\d+)$/, async (ctx) => {
    await ctx.answerCbQuery();
    const shipmentId = ctx.match![1];
    const fromPage = Math.max(1, parseInt(ctx.match![2], 10) || 1);

    const { data: photos } = await supabase
      .from('shipment_photos')
      .select('telegram_file_id')
      .eq('shipment_id', shipmentId)
      .order('id', { ascending: true })
      .limit(10);

    if (!photos || photos.length === 0) {
      await ctx.reply('–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      const kbBack = Markup.inlineKeyboard([[Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç–∞–≤–∫–µ', `prof:shipment:${shipmentId}:${fromPage}`)]]);
      await ctx.reply('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ:', kbBack);
      return;
    }

    if (photos.length === 1) {
      await ctx.replyWithPhoto(photos[0].telegram_file_id);
    } else {
      const media = photos.map((p: any) => ({ type: 'photo' as const, media: p.telegram_file_id }));
      await ctx.replyWithMediaGroup(media);
    }

    const kb = Markup.inlineKeyboard([[Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç–∞–≤–∫–µ', `prof:shipment:${shipmentId}:${fromPage}`)]]);
    await ctx.reply('–ì–æ—Ç–æ–≤–æ.', kb);
  });

  // ---- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –§–æ—Ç–æ –ø–æ ID —á–µ—Ä–µ–∑ –≤–≤–æ–¥ (–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  bot.action('prof:shipment:askphotos', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ—Å—Ç–∞–≤–∫–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π\nPHOTOS_BY_ID', { reply_markup: { force_reply: true } });
  });
  bot.on('text', async (ctx, next) => {
    const r = (ctx.message as any)?.reply_to_message?.text as string | undefined;
    if (r !== '–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ—Å—Ç–∞–≤–∫–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π\nPHOTOS_BY_ID') return next();

    const id = String((ctx.message as any).text).trim();
    const { data: photos } = await supabase
      .from('shipment_photos')
      .select('telegram_file_id')
      .eq('shipment_id', id)
      .order('id', { ascending: true })
      .limit(10);

    if (!photos || photos.length === 0) {
      return void ctx.reply('–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    }
    if (photos.length === 1) {
      await ctx.replyWithPhoto(photos[0].telegram_file_id);
    } else {
      const media = photos.map((p: any) => ({ type: 'photo' as const, media: p.telegram_file_id }));
      await ctx.replyWithMediaGroup(media);
    }
  });

  // ---- –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –≤ —ç—Ç–æ–º –º–æ–¥—É–ª–µ)
  bot.action('prof:report:today', async (ctx) => {
    await ctx.answerCbQuery();
    const me = await getMyTgUser(ctx.from!.id);
    if (!me?.client_id) return void ctx.reply('‚õî –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

    const { data: rows } = await supabase
      .from('shipments')
      .select('boxes, gross_kg')
      .eq('client_id', me.client_id)
      .gte('created_at', new Date(new Date().toISOString().slice(0, 10) + 'T00:00:00.000Z').toISOString());

    if (!rows || rows.length === 0) {
      return void ctx.reply('–ó–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
    }
    const boxesSum = rows.reduce((s: number, r: any) => s + (r.boxes || 0), 0);
    const grossSum = rows.reduce((s: number, r: any) => s + (Number(r.gross_kg) || 0), 0);

    await ctx.reply(`üßæ –û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n–ú–µ—Å—Ç: ${boxesSum}\n–ë—Ä—É—Ç—Ç–æ: ${grossSum.toFixed(2)} –∫–≥`);
  });

  // ---- QR (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –±–µ–∑ –Ω–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø–æ–∫–∞–∂–µ–º –∫–æ–¥)
  bot.action('prof:qr', async (ctx) => {
    await ctx.answerCbQuery();
    const me = await getMyTgUser(ctx.from!.id);
    if (!me?.client_id) return void ctx.reply('‚õî –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    const c = await getClient(me.client_id);
    if (!c?.client_code) return void ctx.reply('–ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω.');

    // –ü—ã—Ç–∞–µ–º—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å qrcode (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ `npm i qrcode`)
    try {
      // @ts-ignore
      const QR = await import('qrcode');
      const png = await (QR as any).toBuffer(c.client_code, { margin: 1, scale: 6 });
      await ctx.replyWithPhoto({ source: png }, { caption: `–ü—Ä–æ–ø—É—Å–∫: ${c.client_code}` });
    } catch {
      await ctx.reply(`–í–∞—à –∫–æ–¥: \`${c.client_code}\`\n(–¥–ª—è QR —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç \`qrcode\`)`, { parse_mode: 'Markdown' });
    }
  });
}
