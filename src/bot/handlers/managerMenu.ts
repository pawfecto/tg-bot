import { Telegraf, Markup } from 'telegraf';
import ExcelJS from 'exceljs';
import { requireManager } from '../../lib/roles';
import { startIntake, getActiveIntake, finalizeIntake } from '../../lib/intake';
import { notifyShipment } from '../../lib/notifymg';
import { dayKST } from '../../lib/date';
import { supabase } from '../../lib/supabase';
import { createSignedUrl } from '../../lib/storage';

// –¢–µ–∫—Å—Ç—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è ForceReply (—á—Ç–æ–±—ã –±—ã–ª–æ –ª–µ–≥–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç)
const PROMPT_CODE = '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ (–ø—Ä–∏–º–µ—Ä: C001 –∏–ª–∏ M255-D):';
const PROMPT_DATE = '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–∏, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –∫–æ–¥: C001):';

// –ü–æ–º–æ—â–Ω–∏–∫: –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–∞—Ç—ã
const isDate = (s?: string) => !!s && /^\d{4}-\d{2}-\d{2}$/.test(s);

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ Excel –Ω–∞ –¥–µ–Ω—å (–∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ /report_day, –æ–¥–∏–Ω –¥–µ–Ω—å = from==to)
async function buildExcelForDay(bot: Telegraf, day: string, code?: string) {
  let q = supabase
    .from('photo_logs')
    .select('date, code, pallet_number, ct, gross, net, note, storage_path, telegram_file_id')
    .eq('date', day)
    .order('code', { ascending: true })
    .order('pallet_number', { ascending: true })
    .order('id', { ascending: true });
  if (code) q = q.eq('code', code.toUpperCase());

  const { data: rows, error } = await q;
  if (error) throw error;
  if (!rows || rows.length === 0) {
    return { buffer: Buffer.from([]), empty: true };
  }

  async function linkFromRow(r: any) {
    if (r.storage_path) {
      const url = await createSignedUrl(r.storage_path);
      if (url) return url;
    }
    if (r.telegram_file_id) {
      const link = await bot.telegram.getFileLink(r.telegram_file_id);
      return link.href;
    }
    return undefined;
  }

  // Summary –ø–æ –∫–æ–¥—É
  const summary = new Map<string, { pallets: number; totalCt: number; totalNet: number }>();
  for (const r of rows) {
    const key = r.code;
    const s = summary.get(key) ?? { pallets: 0, totalCt: 0, totalNet: 0 };
    s.pallets += (r.pallet_number != null ? 1 : 0);
    s.totalCt += Number(r.ct) || 0;
    s.totalNet += Number(r.net) || 0;
    summary.set(key, s);
  }

  const wb = new ExcelJS.Workbook();
  const ws1 = wb.addWorksheet('Palettes');
  ws1.columns = [
    { header: 'Date', key: 'date', width: 12 },
    { header: 'Code', key: 'code', width: 10 },
    { header: 'Pallet #', key: 'pallet', width: 10 },
    { header: 'Boxes', key: 'ct', width: 10 },
    { header: 'Gross', key: 'gross', width: 12 },
    { header: 'Net', key: 'net', width: 12 },
    { header: 'Note', key: 'note', width: 18 },
    { header: 'Link', key: 'link', width: 60 }
  ];
  ws1.getRow(1).font = { bold: true };

  for (const r of rows) {
    const url = await linkFromRow(r);
    ws1.addRow({
      date: r.date,
      code: r.code,
      pallet: r.pallet_number ?? '-',
      ct: r.ct,
      gross: r.gross,
      net: r.net,
      note: r.note ?? '',
      link: url ? { text: 'Open', hyperlink: url } : ''
    });
  }

  const ws2 = wb.addWorksheet('Summary');
  ws2.columns = [
    { header: 'Date', key: 'date', width: 12 },
    { header: 'Code', key: 'code', width: 10 },
    { header: 'Pallets', key: 'pallets', width: 10 },
    { header: 'Total CT', key: 'totalCt', width: 12 },
    { header: 'Total Net', key: 'totalNet', width: 14 }
  ];
  ws2.getRow(1).font = { bold: true };

  for (const [codeKey, s] of summary) {
    ws2.addRow({
      date: day,
      code: codeKey,
      pallets: s.pallets,
      totalCt: s.totalCt,
      totalNet: +s.totalNet.toFixed(2)
    });
  }

  const buf = await wb.xlsx.writeBuffer();
  return { buffer: Buffer.from(buf), empty: false };
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é
function managerMenu() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('üì∏ –§–æ—Ç–æ-–∑–∞—è–≤–∫–∞', 'help_photo')],
    [
      Markup.button.callback('üü¢ –ù–∞—á–∞—Ç—å –ø—Ä–∏—ë–º–∫—É', 'recv_start'),
      Markup.button.callback('‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏—ë–º–∫—É', 'recv_done')
    ],
    [
      Markup.button.callback('üìë –û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è', 'report_today'),
      Markup.button.callback('üìÖ –û—Ç—á—ë—Ç –ø–æ –¥–∞—Ç–µ', 'report_pick_date')
    ],
    [Markup.button.callback('üë• –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã', 'my_clients')],
    [Markup.button.callback('‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞', 'help_all')]
  ]);
}

export function registerManagerMenu(bot: Telegraf) {
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é
  bot.command('menu', requireManager, async (ctx) => {
    await ctx.reply('–ú–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', managerMenu());
  });

  // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Ñ–æ—Ç–æ-–∑–∞—è–≤–∫–µ
  bot.action('help_photo', requireManager, async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply(
      'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n' +
      '`C001 1 24 345.35`\n\n' +
      '–ì–¥–µ: –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ ¬∑ –ø–∞–ª–ª–µ—Ç—ã ¬∑ –∫–æ—Ä–æ–±–∫–∏ ¬∑ –±—Ä—É—Ç—Ç–æ –∫–≥.\n' +
      '–ö–æ–¥—ã –º–æ–∂–Ω–æ –ª—é–±—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `M255-D`, `88880-8829A`).',
      { parse_mode: 'Markdown' }
    );
  });

  // –ù–∞—á–∞—Ç—å –ø—Ä–∏—ë–º–∫—É ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞
  bot.action('recv_start', requireManager, async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply(PROMPT_CODE, { reply_markup: { force_reply: true } });
  });

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏—ë–º–∫—É (—Å—É–º–º–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏, —É–≤–µ–¥–æ–º–ª—è–µ–º)
  bot.action('recv_done', requireManager, async (ctx) => {
    await ctx.answerCbQuery();
    const sid = getActiveIntake(ctx.from!.id);
    if (!sid) {
      await ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–∏—ë–º–∫–∏. –ù–∞–∂–º–∏—Ç–µ ¬´üü¢ –ù–∞—á–∞—Ç—å –ø—Ä–∏—ë–º–∫—É¬ª.');
      return;
    }
    const totals = await finalizeIntake(sid);
    await ctx.reply(
      `‚úÖ –ü—Ä–∏—ë–º–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n–ü–∞–ª–ª–µ—Ç: ${totals.pallets}\n–ú–µ—Å—Ç: ${totals.boxes}\n–ë—Ä—É—Ç—Ç–æ: ${totals.gross.toFixed(2)} –∫–≥`
    );
    // —É–≤–µ–¥–æ–º–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    await notifyShipment(bot, sid, { managers: 'all', includeClient: true });
  });

  // –û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  bot.action('report_today', requireManager, async (ctx) => {
    await ctx.answerCbQuery();
    const day = dayKST();
    const { buffer, empty } = await buildExcelForDay(bot, day);
    if (empty) {
      await ctx.reply(`–î–∞–Ω–Ω—ã—Ö –∑–∞ ${day} –Ω–µ—Ç.`);
      return;
    }
    const filename = `report_${day}.xlsx`;
    await ctx.replyWithDocument({ source: buffer, filename });
  });

  // –û—Ç—á—ë—Ç –ø–æ –¥–∞—Ç–µ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É (–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∫–æ–¥)
  bot.action('report_pick_date', requireManager, async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply(PROMPT_DATE, { reply_markup: { force_reply: true } });
  });

  // –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã (—á–µ—Ä–µ–∑ manager_clients)
  bot.action('my_clients', requireManager, async (ctx) => {
    await ctx.answerCbQuery();
    const { data, error } = await supabase
      .from('manager_clients')
      .select('clients:client_id(client_code)')
      .eq('manager_tg_user_id',
        // –ø–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        (await supabase
          .from('tg_users')
          .select('id')
          .eq('telegram_id', ctx.from!.id)
          .maybeSingle()
        ).data?.id ?? '__none__'
      );
    if (error) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤.');
      return;
    }
    const codes: string[] = (data ?? []).map((r: any) =>
      Array.isArray(r.clients) ? r.clients[0]?.client_code : r.clients?.client_code
    ).filter(Boolean);
    if (!codes.length) {
      await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.');
    } else {
      await ctx.reply('–í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã: ' + codes.sort().join(', '));
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ ForceReply:
  bot.on('text', requireManager, async (ctx, next) => {
    const replyTo = (ctx.message as any)?.reply_to_message?.text as string | undefined;
    if (!replyTo) return next();

    // –û—Ç–≤–µ—Ç –Ω–∞ –≤–≤–æ–¥ –∫–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞ ‚Äî —Å—Ç–∞—Ä—Ç –ø—Ä–∏—ë–º–∫–∏
    if (replyTo === PROMPT_CODE) {
      const code = (ctx.message as any).text.trim().toUpperCase();
      try {
        const { client, shipmentId } = await startIntake(ctx.from!.id, code);
        await ctx.reply(`üü¢ –ü—Ä–∏—ë–º–∫–∞ –Ω–∞—á–∞—Ç–∞ –¥–ª—è ${client.client_code}. ID: ${shipmentId.slice(0, 8)}‚Ä¶`);
      } catch (e: any) {
        await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–∏—ë–º–∫—É: ' + (e?.message ?? '–æ—à–∏–±–∫–∞'));
      }
      return;
    }

    // –û—Ç–≤–µ—Ç –Ω–∞ –≤–≤–æ–¥ –¥–∞—Ç—ã (–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∫–æ–¥–∞) ‚Äî –æ—Ç—á—ë—Ç
    if (replyTo === PROMPT_DATE) {
      const parts = (ctx.message as any).text.trim().split(/\s+/);
      let day = parts[0];
      let code = parts[1];

      if (!isDate(day)) {
        await ctx.reply('–î–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ü—Ä–∏–º–µ—Ä: 2025-08-19 –∏–ª–∏ "2025-08-19 C001".');
        return;
      }

      const { buffer, empty } = await buildExcelForDay(bot, day, code);
      if (empty) {
        await ctx.reply(`–î–∞–Ω–Ω—ã—Ö –∑–∞ ${day}${code ? ` (–∫–æ–¥ ${code})` : ''} –Ω–µ—Ç.`);
        return;
      }
      const filename = `report_${day}${code ? '_' + code.toUpperCase() : ''}.xlsx`;
      await ctx.replyWithDocument({ source: buffer, filename });
      return;
    }
bot.command('ping', requireManager, async (ctx) => {
  await ctx.reply('pong', {
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üîî test callback', 'cb_test')]
    ])
  });
});

bot.action('cb_test', requireManager, async (ctx) => {
  await ctx.answerCbQuery('ok');   // –≤–∞–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ callback_query
  await ctx.reply('callback ok ‚úÖ');
});

    return next();
  });
}
